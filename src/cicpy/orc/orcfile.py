######################################################################
##         <carsten@wulff.no>
## ###################################################################
## Created       : wulff at 2024-4-1
## ###################################################################
##  The MIT License (MIT)
##
##  Permission is hereby granted, free of charge, to any person obtaining a copy
##  of this software and associated documentation files (the "Software"), to deal
##  in the Software without restriction, including without limitation the rights
##  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
##  copies of the Software, and to permit persons to whom the Software is
##  furnished to do so, subject to the following conditions:
##
##  The above copyright notice and this permission notice shall be included in all
##  copies or substantial portions of the Software.
##
##  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
##  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
##  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
##  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
##  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
##  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
##  SOFTWARE.
##
######################################################################

import json

import re

class OrcCell(dict):

    def __init__(self,ckt):
        self["class"] = "Layout::LayoutDigitalCell"
        self["name"] = ckt.name
        self.ckt = ckt


class OrcFile(dict):

    def __init__(self,orcfile):
        self.name = orcfile.replace(".json","")
        with open(orcfile) as fi:
            obj = json.load(fi)

        for o in obj:
            self[o] = obj[o]

        self.cells = list()


    def run(self):
        for c in self["orc_cells"]:
            self.runCell(c)

        data = dict()
        data["cells"] = self.cells
        ofile = self.name + "_out.json"
        ofilespi = self.name + "_out.spi"
        with open(ofile,"w") as fo:
            fo.write(json.dumps(data,indent=4))
        with open(ofilespi,"w") as fo:
            fo.write(f"* autogenerated spice file from cicpy orc {self.name}\n")
            for c in self.cells:
                fo.write(c.ckt.tospice())
                fo.write("\n\n")


    def runCell(self,cell):
        import cicspi as spi
        name = cell["name"]
        sp = spi.SpiceParser()
        sp.parseFile((cell["spice"]))
        ckt  = sp[name]
        for g in cell["groups"]:
            if(g["name"] == "top"):
                orcc = OrcCell(ckt)
            else:
                instckt = ckt.makeInstGroupSubckt(g["name"])
                print(instckt.tospice())
                orcc = OrcCell(instckt)
            for k in g:
                if(k != "name"):
                    orcc[k] = g[k]
            self.cells.append(orcc)
